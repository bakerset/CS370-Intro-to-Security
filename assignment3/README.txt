Testing Procedure - STEP by STEP indicated by "-"

- Change label input if needed:
    label = "bakerset@oregonstate.edu" - change the email to your personal email so the URI can match the sign in on the authenticator app.

    Note: this program doesn't need compiled - optional - "that compiles the program if the code needs compiling"

- Generate the QR Code:
    python otp.py --generate-qr

This will output the URI and generate the QR code into otp.png

- Scan the QR code with Google Authenticator app. Keep this open.

In the terminal you should also recieve a key like this in the URI or URL "GFYGLKLUJ36YKE2NCRALU4URWCDQDUNR". 

- Paste this into the next step in the terminal.

- Generate OTP (match it with Google Authenticator):
    python otp.py --get-otp (example "GFYGLKLUJ36YKE2NCRALU4URWCDQDUNR") - without parentheses and quotation marks then press enter.

Compare the OTP generated by your program with the one in Google Authenticator. They should match within the same 30-second period.


Brief Explanation:
This program has 3 parts to it. However the first two, the generate_qr, generate_otp, work together. Then the 3rd part branches off of part 2 
or generate_otp. This is a command-line application, meaning that this program runs locally and details can be shown on an app that connects to a
user on the app Google Authenticator. This program successfully shows a QR code, a secret/key, and shows the OTP as well as generates new ones in a 30
second timeframe.
